//
// Copyright (c) 2025 OpenStreetMap US
//
//     This program is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "osmconfig.h"
#endif

// This code should actually not be built at all unless --enable-python
// is passed to configure. So we should never get, but let's be paranoid
// and wrap it with a conditional anyway.

#ifdef USE_PYTHON

// #define BOOST_BIND_GLOBAL_PLACEHOLDERS 1
#include <boost/python.hpp>
#include <iostream>

#include "fastclip.hh"

namespace logging = boost::log;
using namespace boost::python;
namespace python = boost::python;

// An abstract base class
class Base : public boost::noncopyable
{
public:
  virtual ~Base() {};
  virtual std::string hello() = 0;
};

class CppDerived : public Base
{
public:
  virtual ~CppDerived() {}
  virtual std::string hello() { return "Hello from C++!";}
};

// Familiar Boost.Python wrapper class for Base
struct BaseWrap : Base, python::wrapper<Base>
{
  virtual std::string hello()
  {
    return this->get_override("hello")();
  }
};

// Pack the Base class wrapper into a module
BOOST_PYTHON_MODULE(embedded_hello)
{
  python::class_<BaseWrap, boost::noncopyable> base("Base");
}

// int main(int argc, char **argv)
// {
//   std::string script = argv[1];
//   // Initialize the interpreter
//   Py_Initialize();
// }

#endif

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
