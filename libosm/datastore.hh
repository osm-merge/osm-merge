//
// Copyright (c) 2025 OpenStreetMap US
//
//     This is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     This project is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef __DATASTORE_HH_
#define __DATASTORE_HH_

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "osmconfig.h"
#endif

#include <fstream>
#include <map>
#include <filesystem>
#include <boost/format.hpp>
#include "osmobjects.hh"
using namespace osmobjects;

namespace datastore {

  class DataStore {
  protected:
    std::map<long int, OsmNode> node_cache;
    std::map<long int, std::shared_ptr<OsmWay>> way_cache;
    std::map<long int, OsmRelation> relation_cache;
    /// The project boundary
    std::map<long int, std::shared_ptr<OsmWay>> aoi;
    // FIXME: this should probably be a vector of tag/value pairs, but
    // keep it simple for now.
    std::vector<std::string_view> keywords;
    std::map<std::string, std::shared_ptr<std::ofstream>> outfiles;
    bool cache_files;
  public:
    /// Features only need to be cached if the data is wanted, otherwise
    /// it's disabled for tag filtering and clipping.
    DataStore(void) { cache_files = false; }
    /// Set the keyword for tag filtering
    void addTagFilter(std::string tag) {
      keywords.push_back(tag);
    }

    void openOutfiles(const std::string &format);
    /// Make this the AOI for the next input file
    void addAOI(const std::string &filespec);

    std::map<long int, OsmNode>getNodes(void) {
      return node_cache;
    }
     std::map<long int, std::shared_ptr<OsmWay>>getWays(void) {
      return way_cache;
    }
     std::map<long int, OsmRelation>getRelations(void) {
      return relation_cache;
    }
    void writeData(const std::string &outfile);

    void tagFilter(const std::string &outfile, const OsmWay &way);
  };
} // end of datastore namespace

#endif  // end of __DATASTORE_HH_

// Local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
