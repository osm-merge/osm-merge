//
// Copyright (c) 2025 OpenStreetMap US
//
//     This is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "osmconfig.h"
#endif

#include <boost/log/trivial.hpp>
#include <boost/date_time/posix_time/posix_time_io.hpp>

#include "osmobjects.hh"
using namespace osmobjects;
#include "osmpbf.hh"
#include "datastore.hh"

// namespace osmpbf {

// Create a callback function
static int cache_callback(void *NotUsed, int argc, char **argv, char **azColName){
  // Return successful
  return 0;
}

void
PBF_Parser::node_callback(uint64_t id,
                          double lon,
                          double lat,
                          const Tags &tags,
                          long int version,
                          long int timestamp)
{
  // BOOST_LOG_TRIVIAL(debug) << "PBF_Parser::node_callback() called";
#if 0
  auto node = osmobjects::OsmNode();
  node.id = id;
  node.version = version;
  node.setPoint(lat, lon);
  node.timestamp = from_time_t(timestamp);
  node_cache[id] = node;
#endif
  char *zErrMsg = 0;
  std::string format("INSERT INTO nodes (id,lat,lon,version,timestamp)");
  format += " VALUES(%1%, %2%, %3%, %4%, %5%);";
  auto sql = boost::format(format) % id % lat % lon % version % timestamp;
  BOOST_LOG_TRIVIAL(debug) << sql.str();
  int rc = sqlite3_exec(db, sql.str().c_str(), cache_callback, 0, &zErrMsg);
  if (rc != SQLITE_OK) {
    BOOST_LOG_TRIVIAL(error) << "SQL command failed! " << zErrMsg;
  }
}

void
PBF_Parser::way_callback(uint64_t id,
                         const Tags &tags,
                         const std::vector<uint64_t> &refs,
                         long int version,
                         long int timestamp
                         )
{
  //BOOST_LOG_TRIVIAL(debug) << "PBF_Parser::way_callback() called";
  auto way = std::make_shared<OsmWay>();
  way->id = id;
  way->version = version;
  way->timestamp = from_time_t(timestamp);
  for (auto it : refs) {
    way->addRef(it);
    //auto node = node_cache.at(it);
    //boost::geometry::append(way->linestring, node.getPoint());
  }

  for (auto it : tags) {
    way->addTag(it.first, it.second);
  }
  // writeFeature(*way);
  /// Optionally cache files.
  //if (cache_files) {
  //  way_cache[id] = way;
  //}
  // way->dump();
}

void
PBF_Parser::relation_callback(uint64_t osmid,
                              const Tags &tags,
                              const References &refs,
                              long int version,
                              long int timestamp)
{
  BOOST_LOG_TRIVIAL(debug) << "PBF_Parser::relation_callback() called";
}

//} //  end of osmpbf namespace

// Local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
