//
// Copyright (c) 2025 OpenStreetMap US
//
//     This is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     This project is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef __OSMXML_HH_
#define __OSMXML_HH_

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "osmconfig.h"
#endif

#include <boost/geometry.hpp>
#include <boost/log/trivial.hpp>
using namespace boost;
namespace logging = boost::log;
// #include <glibmm/convert.h>

#include <map>
#include <libxml++/libxml++.h>
// #include <libxml++/ustring.h>
#include <osmpbfreader.h>
#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;
using namespace osmpbfreader;

#include "osmobjects.hh"
using namespace osmobjects;

namespace osmxml {

class OSMXML {
private:
    
public:
    OSMXML(){};
    std::string &createOSM(OsmNode) const;
    std::string &createOSM(OsmWay) const;
    std::string &createOSM(OsmRelation) const;
};

/// This class implements a SAX parser for OSM XML
class XML_Parser : public xmlpp::SaxParser {
private:
    std::map<long int, OsmNode> node_cache;
    std::map<long int, OsmWay> way_cache;
    std::map<long int, OsmRelation> relation_cache;
public:
    XML_Parser(void){};
        /// Called by libxml++ for each element of the XML file
    /// Read an istream of the data and parse the XML
    bool readXML(std::istream &xml);

    // These are the callbacks for libxml++
    void on_start_element(const Glib::ustring &name,
                          const AttributeList &properties);
    void on_end_element(const Glib::ustring& name);
    void on_comment(const Glib::ustring& text);
    void on_warning(const Glib::ustring& text);
    void on_error(const Glib::ustring& text);
    void on_fatal_error(const Glib::ustring& text);
};

} // end of osmxml namespace

#endif  // end of __OSMXML_HH_

// Local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
