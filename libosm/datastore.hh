//
// Copyright (c) 2025 OpenStreetMap US
//
//     This is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     This project is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef __DATASTORE_HH_
#define __DATASTORE_HH_

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "osmconfig.h"
#endif

#include <fstream>
#include <filesystem>

namespace datastore {

  class DataStore {
  protected:
    std::map<long int, OsmNode> node_cache;
    std::map<long int, std::shared_ptr<OsmWay>> way_cache;
    std::map<long int, OsmRelation> relation_cache;
  public:
     std::map<long int, OsmNode>getNodes(void) {
      return node_cache;
    }
     std::map<long int, std::shared_ptr<OsmWay>>getWays(void) {
      return way_cache;
    }
     std::map<long int, OsmRelation>getRelations(void) {
      return relation_cache;
    }
    void writeData(const std::string &outfile) {
      std::ofstream out(outfile);
      std::filesystem::path path(outfile);
      if (path.extension() == ".osm") {
        out << "<?xml version='1.0' encoding='UTF-8'?>" << std::endl;
        out << "<osm version=\"0.6\" generator=\"osm-merge\">" << std::endl;
        for (auto it = std::begin(node_cache); it != std::end(node_cache); ++it) {
          out << "  " << *it->second.as_osmxml() << std::endl;
        }
        for (auto it = std::begin(way_cache); it != std::end(way_cache); ++it) {
          out << "  " << *it->second->as_osmxml() << std::endl;
        }
        out << "</osm>" << std::endl;
      } else if (path.extension() == ".geojson") {
        for (auto it = std::begin(node_cache); it != std::end(node_cache); ++it) {
          out << "  " << *it->second.as_geojson() << std::endl;
        }
        for (auto it = std::begin(way_cache); it != std::end(way_cache); ++it) {
          out << "  " << *it->second->as_geojson() << std::endl;
        }
      }
      out.close();
    }

    void tagFilter(const std::string &outfile, const std::string &keyword) {
      std::filesystem::path path(outfile);
      std::ofstream out(outfile);
      std::vector<OsmNode> nodes;
      std::vector<OsmWay> ways;
      for (auto it = std::begin(way_cache); it != std::end(way_cache); ++it) {
        if (it->second->tags.count(keyword) > 0) {
          // out << "  " << *it->second->as_osmxml() << std::endl;
          auto refs = it->second->refs;
          for (auto iit = refs.begin(); iit != refs.end(); ++iit) {
            nodes.push_back(node_cache[*iit]);
          }
          ways.push_back(*it->second);
        }
      }
      if (path.extension() == ".osm") {
        out << "<?xml version='1.0' encoding='UTF-8'?>" << std::endl;
        out << "<osm version=\"0.6\" generator=\"osm-merge\">" << std::endl;
      }
      // Nodes are always first in an OSM XML file
      for (auto it = nodes.begin(); it != nodes.end(); ++it) {
        if (path.extension() == ".osm") {
          out << "  " << *it->as_osmxml() << std::endl;
        } else if (path.extension() == ".geojson") {
            out << "  " << *it->as_geojson() << std::endl;
        }
      }
      for (auto it = ways.begin(); it != ways.end(); ++it) {
        if (path.extension() == ".osm") {
          out << "  " << *it->as_osmxml() << std::endl;
        } else if (path.extension() == ".geojson") {
          out << "  " << *it->as_geojson() << std::endl;
        }
      }
      if (path.extension() == ".osm") {
        out << "</osm>" << std::endl;
      }
      out.close();
    }

    void clip(const std::string &outfile) {
      std::filesystem::path path(outfile);
      std::ofstream out(outfile);
      out << "<?xml version='1.0' encoding='UTF-8'?>" << std::endl;
      out << "<osm version=\"0.6\" generator=\"osm-merge\">" << std::endl;
      for (auto it = std::begin(node_cache); it != std::end(node_cache); ++it) {
	out << "  " << *it->second.as_osmxml() << std::endl;
      }
      for (auto it = std::begin(way_cache); it != std::end(way_cache); ++it) {
	out << "  " << *it->second->as_osmxml() << std::endl;
      }
      out << "</osm>" << std::endl;
      out.close();
    }
  };
} // end of parsers namespace

#endif  // end of __DATASTORE_HH_

// Local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
